$date
	Sun Feb 23 19:54:36 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module reg_file_tb $end
$var wire 8 ! cpu_out [7:0] $end
$var wire 8 " RD2 [7:0] $end
$var wire 8 # RD1 [7:0] $end
$var reg 8 $ ALUResult [7:0] $end
$var reg 1 % CLK $end
$var reg 4 & RA1 [3:0] $end
$var reg 4 ' RA2 [3:0] $end
$var reg 4 ( WA [3:0] $end
$var reg 1 ) write_enable $end
$scope module uut $end
$var wire 8 * ALUResult [7:0] $end
$var wire 1 % CLK $end
$var wire 4 + RA1 [3:0] $end
$var wire 4 , RA2 [3:0] $end
$var wire 8 - RD1 [7:0] $end
$var wire 8 . RD2 [7:0] $end
$var wire 4 / WA [3:0] $end
$var wire 8 0 cpu_out [7:0] $end
$var wire 1 ) write_enable $end
$scope begin $ivl_for_loop0 $end
$var integer 32 1 i [31:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 2 i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 2
b10000 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
0)
b0 (
b0 '
b0 &
0%
b0 $
b0 #
b0 "
b0 !
$end
#10000
1%
#20000
0%
1)
b10001 $
b10001 *
b1 (
b1 /
b1 2
#30000
1%
#40000
0%
b10001 #
b10001 -
b1 &
b1 +
0)
#50000
1%
#60000
0%
1)
b100010 $
b100010 *
b10 (
b10 /
b10 2
#70000
1%
#80000
0%
b10001 "
b10001 .
b1 '
b1 ,
b100010 #
b100010 -
b10 &
b10 +
0)
#90000
1%
#100000
0%
1)
b110011 $
b110011 *
b11 (
b11 /
b11 2
#110000
1%
#120000
0%
b100010 "
b100010 .
b10 '
b10 ,
b110011 #
b110011 -
b11 &
b11 +
0)
#130000
1%
#140000
0%
1)
b1000100 $
b1000100 *
b100 (
b100 /
b100 2
#150000
#220000
00
0%
b110011 "
b110011 .
b11 '
b11 ,
b1000100 #
b1000100 -
b100 &
b100 +
0)
#170000
1%
#180000
0%
1)
b1010101 $
b1010101 *
b101 (
b101 /
b101 2
#190000
1%
#200000
0%
b1000100 "
b1000100 .
b100 '
b100 ,
b1010101 #
b1010101 -
b101 &
b101 +
0)
#210000
1%
#220000
0%
1)
b1100110 $
b1100110 *
b110 (
b110 /
b110 2
#230000
1%
#240000
0%
b1010101 "
b1010101 .
b101 '
b101 ,
b1100110 #
b1100110 -
b110 &
b110 +
0)
#250000
1%
#260000
0%
1)
b1110111 $
b1110111 *
b111 (
b111 /
b111 2
#270000
1%
#280000
0%
b1100110 "
b1100110 .
b110 '
b110 ,
b1110111 #
b1110111 -
b111 &
b111 +
0)
#290000
1%
#300000
0%
1)
b10001000 $
b10001000 *
b1000 (
b1000 /
b1000 2
#310000
1%
#320000
0%
b1110111 "
b1110111 .
b111 '
b111 ,
b10001000 #
b10001000 -
b1000 &
b1000 +
0)
#330000
1%
#340000
0%
1)
b10011001 $
b10011001 *
b1001 (
b1001 /
b1001 2
#350000
1%
#360000
0%
b10001000 "
b10001000 .
b1000 '
b1000 ,
b10011001 #
b10011001 -
b1001 &
b1001 +
0)
#370000
1%
#380000
0%
1)
b10101010 $
b10101010 *
b1010 (
b1010 /
b1010 2
#390000
1%
#400000
0%
b10011001 "
b10011001 .
b1001 '
b1001 ,
b10101010 #
b10101010 -
b1010 &
b1010 +
0)
#410000
1%
#420000
0%
1)
b10111011 $
b10111011 *
b1011 (
b1011 /
b1011 2
#430000
1%
#440000
0%
b10101010 "
b10101010 .
b1010 '
b1010 ,
b10111011 #
b10111011 -
b1011 &
b1011 +
0)
#450000
1%
#460000
0%
1)
b11001100 $
b11001100 *
b1100 (
b1100 /
b1100 2
#470000
1%
#480000
0%
b10111011 "
b10111011 .
b1011 '
b1011 ,
b11001100 #
b11001100 -
b1100 &
b1100 +
0)
#490000
1%
#500000
0%
1)
b11011101 $
b11011101 *
b1101 (
b1101 /
b1101 2
#510000
1%
#520000
0%
b11001100 "
b11001100 .
b1100 '
b1100 ,
b11011101 #
b11011101 -
b1101 &
b1101 +
0)
#530000
1%
#540000
0%
1)
b11101110 $
b11101110 *
b1110 (
b1110 /
b1110 2
#550000
1%
#560000
0%
b11011101 "
b11011101 .
b1101 '
b1101 ,
b11101110 #
b11101110 -
b1110 &
b1110 +
0)
#570000
1%
#580000
0%
1)
b11111111 $
b11111111 *
b1111 (
b1111 /
b1111 2
#590000
b11111111 !
b11111111 0
1%
#600000
0%
b11101110 "
b11101110 .
b1110 '
b1110 ,
b11111111 #
b11111111 -
b1111 &
b1111 +
0)
#610000
1%
#620000
0%
b10000 2
#630000
1%
#640000
